import { CellConfig, jsPDF } from "jspdf";
import { Incident, User } from "@referee-fyi/share";
import { RobotEventsClient } from "robotevents";

export type GenerateIncidentReportPDFOptions = {
  sku: string;
  users: User[];
  client: RobotEventsClient;
  incidents: Incident[];
};

type IncidentRow = {
  team: string;
  match: string;
  rule: string;
  contact: string;
  notes: string;
};

export async function generateIncidentReportPDF({
  sku,
  users,
  client,
  incidents,
}: GenerateIncidentReportPDFOptions): Promise<ArrayBuffer | null> {
  const event = await client.events.getBySKU(sku);
  if (!event.data) {
    return null;
  }

  const document = new jsPDF({
    unit: "px",
    orientation: "portrait",
    compress: true,
    format: "letter",
  });

  // Header
  document.setFont("helvetica", "bold");
  document.setFontSize(18);
  document.text("Referee Match Anomaly Log", 16, 16);

  document.setFont("helvetica", "italic");
  document.setFontSize(12);
  document.text(event.data.name, 16, 30);

  document.setFont("helvetica", "normal");
  document.setFontSize(12);
  document.text(
    `This anomaly log was generated by Referee FYI at ${new Date().toLocaleString()}.`,
    16,
    44
  );

  const data: IncidentRow[] = [];

  const incidentsInOrder = incidents.sort((a, b) => {
    return b.team.localeCompare(a.team);
  });

  for (const incident of incidentsInOrder) {
    const contact = users.find(
      (user) => user.key === incident.consistency.outcome.peer
    );

    data.push({
      team: incident.team,
      match: incident.match?.type === "match" ? incident.match.name : "Skills",
      rule: incident.outcome + " " + incident.rules.join(", "),
      contact: contact?.name ?? "",
      notes: incident.notes,
    });
  }

  const headers: CellConfig[] = [
    {
      name: "team",
      prompt: "Team",
      align: "left",
      width: 60,
      padding: 2,
    },
    {
      name: "match",
      prompt: "Match",
      align: "left",
      width: 90,
      padding: 2,
    },
    {
      name: "rule",
      prompt: "Rule",
      align: "left",
      width: 100,
      padding: 2,
    },
    {
      name: "contact",
      prompt: "Contact",
      align: "left",
      width: 140,
      padding: 2,
    },
    {
      name: "notes",
      prompt: "Notes",
      align: "left",
      width: 180,
      padding: 2,
    },
  ];
  document.table(16, 56, data, headers, {
    autoSize: false,
  });

  return document.output("arraybuffer");
}
